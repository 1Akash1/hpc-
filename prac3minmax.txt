#include <iostream>
#include <vector>
#include <omp.h>

// Function to calculate min, max, sum, and average using parallel reduction
void parallel_reduction(const std::vector<int>& data, int& min_val, int& max_val, int& sum, double& avg) {
    int n = data.size();
    int local_min = data[0], local_max = data[0], local_sum = 0;

    #pragma omp parallel for reduction(min:local_min) reduction(max:local_max) reduction(+:local_sum)
    for (int i = 0; i < n; ++i) {
        local_min = std::min(local_min, data[i]);
        local_max = std::max(local_max, data[i]);
        local_sum += data[i];
    }

    min_val = local_min;
    max_val = local_max;
    sum = local_sum;
    avg = static_cast<double>(local_sum) / n;
}

int main() {
    std::vector<int> data = {4, 2, 7, 1, 9, 5, 3, 8, 6};
    int min_val, max_val, sum;
    double avg;

    parallel_reduction(data, min_val, max_val, sum, avg);

    std::cout << "Min: " << min_val << std::endl;
    std::cout << "Max: " << max_val << std::endl;
    std::cout << "Sum: " << sum << std::endl;
    std::cout << "Average: " << avg << std::endl;

    return 0;
}
